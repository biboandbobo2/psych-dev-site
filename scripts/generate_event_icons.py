#!/usr/bin/env python3
"""
Утилита для синхронизации списка пиктограмм событий.

Проверяет наличие 40 PNG-файлов в `public/icons/events`,
обновляет `icons.json` и `eventIcons.ts`.

Если нужно заново скопировать заготовку из исходной папки,
можно добавить флаг --copy-from <path>, содержащий PNG в порядке строк/колонок.
"""

import argparse
import json
from pathlib import Path
from typing import List, Tuple

ROOT = Path(__file__).resolve().parents[1]
OUTPUT_DIR = ROOT / "public" / "icons" / "events"
JSON_OUTPUT = ROOT / "public" / "icons" / "icons.json"
TS_OUTPUT = ROOT / "src" / "data" / "eventIcons.ts"

ICON_ENTRIES: List[Tuple[str, str]] = [
    ("baby-swaddle", "Младенец"),
    ("baby-feet", "Следы малыша"),
    ("heart-message", "Сообщение с сердцем"),
    ("friendship", "Друзья"),
    ("celebration-balloons", "Праздничные шары"),
    ("pet-paw", "Лапка питомца"),
    ("school-backpack", "Школьный рюкзак"),
    ("report-card", "Отличная оценка"),
    ("graduation-cap", "Выпускная шапка"),
    ("party-balloons", "Праздник"),
    ("art-palette", "Творчество"),
    ("music-headphones", "Музыка"),
    ("car", "Автомобиль"),
    ("briefcase", "Работа"),
    ("cash", "Финансы"),
    ("key", "Ключ"),
    ("house", "Дом"),
    ("mortgage", "Ипотека"),
    ("passport", "Паспорт"),
    ("world-travel", "Путешествие"),
    ("id-card", "Удостоверение"),
    ("graduation-diploma", "Диплом"),
    ("love-letter", "Письмо с сердцем"),
    ("idea-book", "Идея и книга"),
    ("thermometer", "Термометр"),
    ("heart-nature", "Забота о природе"),
    ("trophy", "Кубок"),
    ("love-rings", "Любовь"),
    ("engagement-ring", "Помолвка"),
    ("baby-stroller", "Коляска"),
    ("visa-card", "Виза"),
    ("certificate", "Сертификат"),
    ("handshake", "Партнёрство"),
    ("heart-hands", "Сердце в руках"),
    ("hammock", "Отдых"),
    ("winner-cup", "Победа"),
    ("baby-mobile", "Детская погремушка"),
    ("infinity-ring", "Бесконечность"),
    ("wedding-rings", "Свадебные кольца"),
    ("prayer-hands", "Поддержка"),
]


def copy_from(source: Path) -> None:
    files = sorted(source.rglob("*.png"))
    if len(files) != len(ICON_ENTRIES):
        raise SystemExit(f"Expected {len(ICON_ENTRIES)} PNG, found {len(files)}")

    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    for src, (icon_id, _) in zip(files, ICON_ENTRIES):
        dest = OUTPUT_DIR / f"{icon_id}.png"
        dest.write_bytes(src.read_bytes())


def write_metadata() -> None:
    icons_meta = [
        {
            "id": icon_id,
            "name": title,
            "filename": f"{icon_id}.png",
        }
        for icon_id, title in ICON_ENTRIES
    ]

    JSON_OUTPUT.write_text(json.dumps(icons_meta, ensure_ascii=False, indent=2), encoding="utf-8")

    ts_lines = [
        "// This file is auto-generated by scripts/generate_event_icons.py",
        "// Do not edit manually.",
        "",
        "export const EVENT_ICONS = " + json.dumps(icons_meta, ensure_ascii=False, indent=2) + " as const;",
        "",
        "export type EventIconId = typeof EVENT_ICONS[number]['id'];",
        "",
        "export const EVENT_ICON_MAP: Record<EventIconId, (typeof EVENT_ICONS)[number]> = EVENT_ICONS.reduce(",
        "  (acc, icon) => {",
        "    acc[icon.id] = icon;",
        "    return acc;",
        "  },",
        "  {} as Record<EventIconId, (typeof EVENT_ICONS)[number]>",
        ");",
        "",
    ]

    TS_OUTPUT.parent.mkdir(parents=True, exist_ok=True)
    TS_OUTPUT.write_text("\n".join(ts_lines), encoding="utf-8")


def main() -> None:
    parser = argparse.ArgumentParser(description="Sync timeline event icons")
    parser.add_argument("--copy-from", type=Path, help="Directory with PNG icons to copy", default=None)
    args = parser.parse_args()

    if args.copy_from:
        copy_from(args.copy_from)

    missing = [icon_id for icon_id, _ in ICON_ENTRIES if not (OUTPUT_DIR / f"{icon_id}.png").exists()]
    if missing:
        raise SystemExit(f"Missing icons: {', '.join(missing)}")

    write_metadata()


if __name__ == "__main__":
    main()

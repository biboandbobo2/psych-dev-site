import { useState, useEffect } from 'react';
import { Link, Navigate } from 'react-router-dom';
import { AUTHORS_TEST_LEVEL2_QUESTIONS, type QuoteQuestion } from '../data/authorsTestLevel2Data';
import { useAuth } from '../auth/AuthProvider';
import { saveTestResult, getTestResults } from '../lib/testResults';
import TestHistory from '../components/TestHistory';

type AnswerState = 'idle' | 'correct' | 'incorrect';

const TEST_ID = 'authors-test-level2';
const TEST_TITLE = '–¶–∏—Ç–∞—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ (–£—Ä–æ–≤–µ–Ω—å 2)';
const REQUIRED_LEVEL1_SCORE = 10; // –ù—É–∂–Ω–æ 10/10 –Ω–∞ —É—Ä–æ–≤–Ω–µ 1

export default function AuthorsTestLevel2() {
  const { user } = useAuth();
  const [started, setStarted] = useState(false);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [answerState, setAnswerState] = useState<AnswerState>('idle');
  const [showExplanation, setShowExplanation] = useState(false);
  const [finished, setFinished] = useState(false);
  const [startTime, setStartTime] = useState<Date | null>(null);
  const [resultSaved, setResultSaved] = useState(false);
  const [isUnlocked, setIsUnlocked] = useState<boolean | null>(null); // null = loading

  const currentQuestion = AUTHORS_TEST_LEVEL2_QUESTIONS[currentQuestionIndex];
  const totalQuestions = AUTHORS_TEST_LEVEL2_QUESTIONS.length;
  const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è 2
  useEffect(() => {
    if (!user) {
      setIsUnlocked(false);
      return;
    }

    const checkUnlock = async () => {
      try {
        const level1Results = await getTestResults(user.uid, 'authors-test');
        const hasPerfectScore = level1Results.some((result) => result.score === REQUIRED_LEVEL1_SCORE);
        console.log('üîµ [Level2] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', { hasPerfectScore, results: level1Results });
        setIsUnlocked(hasPerfectScore);
      } catch (error) {
        console.error('‚ùå [Level2] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
        setIsUnlocked(false);
      }
    };

    checkUnlock();
  }, [user]);

  const handleStart = () => {
    setStarted(true);
    setStartTime(new Date());
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  useEffect(() => {
    if (finished && !resultSaved && user && startTime) {
      const saveResult = async () => {
        try {
          const endTime = new Date();
          const timeSpent = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);
          const percentage = Math.round((score / totalQuestions) * 100);

          console.log('üîµ [AuthorsTest] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
            userId: user.uid,
            testId: TEST_ID,
            testTitle: TEST_TITLE,
            score,
            totalQuestions,
            percentage,
            completedAt: endTime,
            timeSpent,
          });

          await saveTestResult({
            userId: user.uid,
            testId: TEST_ID,
            testTitle: TEST_TITLE,
            score,
            totalQuestions,
            percentage,
            completedAt: endTime,
            timeSpent,
          });

          console.log('‚úÖ [AuthorsTest] –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
          setResultSaved(true);
        } catch (error) {
          console.error('‚ùå [AuthorsTest] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
        }
      };

      saveResult();
    }
  }, [finished, resultSaved, user, startTime, score, totalQuestions]);

  const handleAnswer = (answer: string) => {
    if (answerState !== 'idle') return;

    setSelectedAnswer(answer);
    const isCorrect = answer === currentQuestion.correctAuthor;

    if (isCorrect) {
      setScore(score + 1);
      setAnswerState('correct');
    } else {
      setAnswerState('incorrect');
    }

    setShowExplanation(true);
  };

  const handleNext = () => {
    if (currentQuestionIndex < totalQuestions - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedAnswer(null);
      setAnswerState('idle');
      setShowExplanation(false);
    } else {
      setFinished(true);
    }
  };

  const handleRestart = () => {
    setStarted(false);
    setCurrentQuestionIndex(0);
    setScore(0);
    setSelectedAnswer(null);
    setAnswerState('idle');
    setShowExplanation(false);
    setFinished(false);
    setStartTime(null);
    setResultSaved(false);
  };

  const getButtonClass = (option: string) => {
    const baseClass =
      'w-full text-left p-4 rounded-xl border-2 font-semibold transition-all duration-300 transform';

    if (answerState === 'idle') {
      return `${baseClass} border-gray-300 bg-white hover:border-blue-400 hover:bg-blue-50 hover:scale-105 cursor-pointer`;
    }

    if (option === currentQuestion.correctAuthor) {
      return `${baseClass} border-green-500 bg-green-100 text-green-800`;
    }

    if (option === selectedAnswer && answerState === 'incorrect') {
      return `${baseClass} border-red-500 bg-red-100 text-red-800`;
    }

    return `${baseClass} border-gray-300 bg-gray-100 text-gray-500 cursor-not-allowed`;
  };

  const getScoreEmoji = () => {
    const percentage = (score / totalQuestions) * 100;
    if (percentage === 100) return 'üèÜ';
    if (percentage >= 80) return 'üåü';
    if (percentage >= 60) return 'üëç';
    if (percentage >= 40) return 'üìö';
    return 'üí™';
  };

  const getScoreMessage = () => {
    const percentage = (score / totalQuestions) * 100;
    if (percentage === 100) return '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
    if (percentage >= 80) return '–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –∑–Ω–∞–µ—Ç–µ —Ü–∏—Ç–∞—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤!';
    if (percentage >= 60) return '–•–æ—Ä–æ—à–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª!';
    if (percentage >= 40) return '–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!';
    return '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.';
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  if (isUnlocked === null) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4" />
          <p className="text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...</p>
        </div>
      </div>
    );
  }

  if (!isUnlocked) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 py-12 px-4">
        <div className="max-w-3xl mx-auto">
          <Link
            to="/tests"
            className="inline-flex items-center text-gray-600 hover:text-gray-900 mb-6 transition-colors"
          >
            <span className="text-xl mr-2">‚Üê</span>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤
          </Link>

          <div className="bg-white rounded-2xl shadow-xl p-8 md:p-12 text-center">
            <div className="text-6xl mb-6">üîí</div>
            <h1 className="text-3xl font-bold text-gray-900 mb-4">–£—Ä–æ–≤–µ–Ω—å 2 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</h1>
            <p className="text-xl text-gray-600 mb-6">
              –ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å <strong>10 –∏–∑ 10 –±–∞–ª–ª–æ–≤</strong> –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ.
            </p>
            <Link
              to="/tests/authors"
              className="inline-block bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-4 rounded-xl font-bold text-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300"
            >
              –ü—Ä–æ–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å 1
            </Link>
          </div>
        </div>
      </div>
    );
  }

  if (!started) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 py-12 px-4">
        <div className="max-w-3xl mx-auto">
          <Link
            to="/tests"
            className="inline-flex items-center text-gray-600 hover:text-gray-900 mb-6 transition-colors"
          >
            <span className="text-xl mr-2">‚Üê</span>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤
          </Link>

          <div className="bg-white rounded-2xl shadow-xl p-8 md:p-12">
            <div className="text-center">
              <div className="text-6xl mb-6">üí¨</div>
              <div className="inline-flex items-center gap-2 mb-4">
                <span className="px-3 py-1 bg-gradient-to-r from-yellow-400 to-orange-500 text-white rounded-full text-sm font-bold">
                  üî• –£–†–û–í–ï–ù–¨ 2
                </span>
              </div>
              <h1 className="text-4xl font-bold text-gray-900 mb-4">
                –¶–∏—Ç–∞—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
              </h1>
              <p className="text-xl text-gray-600 mb-8">
                –£–≥–∞–¥–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–æ–≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º—ã—Å–ª–µ–π –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
              </p>

              <div className="bg-purple-50 border border-purple-200 rounded-xl p-6 mb-8 text-left">
                <h3 className="font-semibold text-purple-900 mb-3 flex items-center gap-2">
                  <span>üìã</span>
                  –ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Å—Ç–∞:
                </h3>
                <ul className="space-y-2 text-purple-800">
                  <li>‚Ä¢ –í—Å–µ–≥–æ <strong>{totalQuestions} —Ü–∏—Ç–∞—Ç</strong></li>
                  <li>‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–π —Ü–∏—Ç–∞—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∏–∑ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</li>
                  <li>‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</li>
                  <li>‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî 1 –±–∞–ª–ª</li>
                  <li>‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤—ã—à–µ, —á–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ 1 ‚Äî –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!</li>
                </ul>
              </div>

              <button
                onClick={handleStart}
                className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-4 rounded-xl font-bold text-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300"
              >
                –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
              </button>
            </div>
          </div>

          {user && (
            <div className="mt-6">
              <TestHistory testId={TEST_ID} />
            </div>
          )}
        </div>
      </div>
    );
  }

  if (finished) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 py-12 px-4">
        <div className="max-w-3xl mx-auto">
          <div className="bg-white rounded-2xl shadow-xl p-8 md:p-12">
            <div className="text-center">
              <div className="text-8xl mb-6">{getScoreEmoji()}</div>
              <h1 className="text-4xl font-bold text-gray-900 mb-4">–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!</h1>
              <p className="text-2xl text-gray-600 mb-8">{getScoreMessage()}</p>

              <div className="bg-gradient-to-br from-purple-100 to-blue-100 rounded-2xl p-8 mb-8">
                <div className="text-6xl font-bold text-purple-700 mb-2">
                  {score} / {totalQuestions}
                </div>
                <div className="text-lg text-gray-700">–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</div>
                <div className="mt-4 text-3xl font-bold text-blue-600">
                  {Math.round((score / totalQuestions) * 100)}%
                </div>
              </div>

              <div className="space-y-4">
                <button
                  onClick={handleRestart}
                  className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-4 rounded-xl font-bold text-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300"
                >
                  –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
                </button>
                <Link
                  to="/tests"
                  className="block w-full bg-white border-2 border-gray-300 text-gray-700 px-8 py-4 rounded-xl font-bold text-lg hover:border-gray-400 transition-all duration-300"
                >
                  –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤
                </Link>
              </div>
            </div>
          </div>

          {user && (
            <div className="mt-6">
              <TestHistory testId={TEST_ID} />
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 py-12 px-4">
      <div className="max-w-3xl mx-auto">
        <div className="mb-6 flex items-center justify-between">
          <div className="text-sm font-semibold text-gray-600">
            –í–æ–ø—Ä–æ—Å {currentQuestionIndex + 1} –∏–∑ {totalQuestions}
          </div>
          <div className="text-sm font-semibold text-purple-600">
            –ë–∞–ª–ª–æ–≤: {score} / {totalQuestions}
          </div>
        </div>

        <div className="mb-6 bg-gray-200 rounded-full h-3 overflow-hidden">
          <div
            className="bg-gradient-to-r from-purple-600 to-blue-600 h-full transition-all duration-500 ease-out"
            style={{ width: `${progress}%` }}
          />
        </div>

        <div className="bg-white rounded-2xl shadow-xl p-8 md:p-12">
          <div className="mb-8 text-center">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-purple-100 to-blue-100 rounded-full mb-4">
              <span className="text-3xl">üí¨</span>
            </div>
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              –ö—Ç–æ –∞–≤—Ç–æ—Ä —ç—Ç–æ–π —Ü–∏—Ç–∞—Ç—ã?
            </h2>
            <div className="text-xl text-gray-700 font-medium italic max-w-2xl mx-auto border-l-4 border-purple-500 pl-4 text-left">
              "{currentQuestion.quote}"
            </div>
          </div>

          <div className="space-y-4 mb-6">
            {currentQuestion.options.map((option, index) => (
              <button
                key={index}
                onClick={() => handleAnswer(option)}
                disabled={answerState !== 'idle'}
                className={getButtonClass(option)}
              >
                <div className="flex items-center gap-3">
                  <span className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center font-bold text-gray-700">
                    {String.fromCharCode(65 + index)}
                  </span>
                  <span>{option}</span>
                </div>
              </button>
            ))}
          </div>

          {showExplanation && (
            <div className="mt-6 animate-fadeIn">
              <div
                className={`p-6 rounded-xl border-2 ${
                  answerState === 'correct'
                    ? 'bg-green-50 border-green-300'
                    : 'bg-blue-50 border-blue-300'
                }`}
              >
                <div className="flex items-start gap-3 mb-3">
                  <span className="text-2xl">
                    {answerState === 'correct' ? '‚úÖ' : '‚ÑπÔ∏è'}
                  </span>
                  <div>
                    <div
                      className={`font-bold mb-2 ${
                        answerState === 'correct' ? 'text-green-800' : 'text-blue-800'
                      }`}
                    >
                      {answerState === 'correct' ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '–ù–µ —Å–æ–≤—Å–µ–º...'}
                    </div>
                    <p className="text-gray-700">{currentQuestion.explanation}</p>
                  </div>
                </div>
              </div>

              <button
                onClick={handleNext}
                className="mt-6 w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white px-6 py-3 rounded-xl font-bold hover:shadow-lg transform hover:scale-105 transition-all duration-300"
              >
                {currentQuestionIndex < totalQuestions - 1
                  ? '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí'
                  : '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
